from keras.models import Sequential
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
from keras.models import load_model
from scipy.misc import imread, imresize
import pandas as pd

model = Sequential()
# model.add(Convolution2D(32, 3, 3, input_shape=(3, 150, 150)))
# model.add(Convolution2D(32, 3, 3, input_shape=(150, 150, 3)))
model.add(Convolution2D(32, 3, 3, input_shape=(150, 150, 1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

# this is the augmentation configuration we will use for testing:
# only rescaling
test_datagen = ImageDataGenerator(rescale=1./255)

# this is a generator that will read pictures found in
# subfolers of 'data/train', and indefinitely generate
# batches of augmented image data
train_generator = train_datagen.flow_from_directory(
        'D:/project/image_classification/example/untitled/pic/train/',  # this is the target directory
        target_size=(150, 150),  # all images will be resized to 150x150
        batch_size=32,
        color_mode='grayscale',
        class_mode='binary',
        save_to_dir='D:/project/image_classification/example/untitled/pic/converted/',
        save_format='jpeg'
        )  # since we use binary_crossentropy loss, we need binary labels

# this is a similar generator, for validation data
validation_generator = test_datagen.flow_from_directory(
        'D:/project/image_classification/example/untitled/pic/validate/',
        target_size=(150, 150),
        batch_size=1,
        color_mode='grayscale',
        class_mode='binary',

        save_to_dir = 'D:/project/image_classification/example/untitled/pic/convert2/',
        save_format = 'jpeg'
)


model.fit_generator(
        train_generator,
        samples_per_epoch=2500,
        nb_epoch=10,
        validation_data=validation_generator,
        nb_val_samples=800)

model.save('first_try.h5')


# test_generator = test_datagen.flow_from_directory('D:/project/image_classification/example/untitled/pic/validate/',
#                 batch_size = 20,
#                 target_size =(150, 150), classes = None, shuffle =False)
#
# test_data_features = model.predict_generator(test_generator, 20)

# print('load models')
# print(test_data_features)
#
# print('Label predicted')
# pd.DataFrame(test_data_features).to_csv('Xtest.csv')
# # model2 = load_model('first_try.h5')

# img1 = load_img('D:/project/image_classification/example/untitled/pic/validate/cat/cat.475.jpg')  # this is a PIL image
# img1 = imread('D:/project/image_classification/example/untitled/pic/validate/cat/cat.520.jpg', mode='RGB')
# img1 = imread('D:/project/image_classification/example/untitled/pic/validate/id/71.jpg', mode='RGB') #0
# img1 = imresize(img1, (150, 150))
# x = img_to_array(img1)  # this is a Numpy array with shape (3, 150, 150)
# x = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)
#
# print(model.predict_classes(x,verbose=1))
#
# print('class')
# print(model.predict(x))
